zcc +zx main.c -create-app -m -s --list


#include <stdint.h>

#define CALC_Y(y) ((((y) & 0x7) << 8) | (((y) & 0x38) << 2) | (((y) & 0xC0) << 5))
#define NTILES (2)

uint8_t tiles[NTILES*32] = {
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,

//brick wall
    0xFF, 0xFF, 0xFF, 0xFF,
    0x80, 0x01, 0x01, 0x80,
    0x80, 0x01, 0x01, 0x80,
    0x80, 0x01, 0x01, 0x80, 
    0x80, 0x01, 0x01, 0x80,
    0x80, 0x01, 0x01, 0x80,
    0x80, 0x01, 0x01, 0x80,
    0xFF, 0xFF, 0xFF, 0xFF,
};

uint8_t player_sprite[32] = {
    0x00, 0x70, 0x0f, 0xf0,
    0x01, 0xe0, 0x0f, 0xf0,
    0x03, 0xc0, 0x0f, 0xf0,
    0x07, 0xe0, 0x07, 0xe0,
    0x05, 0xa0, 0x07, 0xe0,
    0x03, 0xc0, 0x07, 0xe0,
    0x02, 0x40, 0x04, 0x20,
    0x07, 0xe0, 0x06, 0x30,
};

#define MAPW (8)
#define MAPH (8)
#define MAPSZ (MAPH * MAPW)
#define XY(x,y) (((uint16_t)(x))+(((uint16_t)(y))<<3))
#define TILE(n) (tiles + ((n)<<5))

uint8_t maze[MAPSZ] = {
    1,1,1,1,1,1,1,1,
    1,0,0,0,0,0,0,1,
    1,0,0,0,0,0,0,1,
    1,0,0,0,0,0,0,1,
    1,0,0,0,0,0,0,1,
    1,0,0,0,0,0,0,1,
    1,0,0,0,0,0,0,1,
    1,1,1,1,1,1,1,1,    
};

uint8_t px = 4;
uint8_t py = 4;

void render_maze(){
    uint8_t tl_x = px - 4;
    //current pos of player 
    uint8_t tl_y = py - 4;
    //used to render the parts of the maze that the player can't reach
    for (uint8_t xy = 0; xy <= 63; xy++){
        //iterates throught the differnt tiles
        ///our tiles take up 4 8x8 tiles
        if (xy==0x1b){continue;}
        uint8_t x = xy&0x7;
        uint16_t *tp = (uint16_t *)TILE(maze[XY(x+tl_x,(xy>>3) + tl_y)]);
        uint16_t *bp = (uint16_t *)(0x4000+( ((uint16_t)(((((xy&0x18)<<3) | (x<<1))))) | ((uint16_t)((xy&0x20)<<6))));
        bp += 4;    
        //used to move the render's x position
        
        
        for (uint8_t i = 0; i<= 7; i++){
            *bp = *tp++;
            bp += 16;
            *bp = *tp++;
            bp += 112;
        }
    }
}

#define ATTR(x,y) ((((uint16_t)(y))<<5)+((uint16_t)(x)))

void init_ui(){
    volatile uint8_t* attrs = (uint8_t *)(0x5800);
    for (int i = 16; i<= (16+(32*24)); i+= 32){
        attrs[i] = 0;
    }

    for (int i = 16*32; i< (16*32)+16; i+= 1){
        attrs[i] = 0;
    }

    for (int y = 0; y<= 15; y++){
        for (int x = 8; x<= 23; x++){
            //used to change the colour data's position
            attrs[ATTR(x,y)] = 0x02;
        }
    }

// render player
   uint8_t xy = (3<<3) | 3;
   uint8_t x = xy&0x7;
   uint16_t *tp = (uint16_t *)player_sprite;
   uint16_t *bp = (uint16_t *)(0x4000+( ((uint16_t)(((((xy&0x18)<<3) | (x<<1))))) | ((uint16_t)((xy&0x20)<<6))));
   for (uint8_t i = 0; i<= 7; i++){
       *bp = *tp++;
       bp += 16;
       *bp = *tp++;
       bp += 112;
   }

}

int main(){
    // black border
    asm(
        "push af\n"
        "ld a,0\n"
        "call 8859\n"
        "pop af\n"
    );
    init_ui();
    while (1){
        render_maze();
        //asm(
        //    "push bc\n"
        //    "ld bc, &fbfe\n"
        //    "and %1\n"
        //    "pop bc\n"
        //);
    }
}
